##############################################################################
#                                                                            #  
#            PROGRAMA PARA LA ENTREGA DE INFORMACIÓN POR DEMANDA             #
#                                                                            #
##############################################################################

options(digits = 10)

# Paquetes y versiones requeridas

library(tidyverse) # version 1.2.1
library(readxl)    # version 1.0.0
library(dplyr)

# Definir tipo de las variables a importar

tipovar <- c("text", "text", "numeric", "numeric", "text", "text", "text", "numeric", 
  "text", "numeric", "text", "text", "text", "numeric", "text", "numeric", 
  "text", "text", "text", "numeric", "text", "numeric", "text", "text", 
  "text", "text", "text", "numeric", "text", "text", "text", "text", "numeric", 
  "text", "numeric", "text", "text", "text", "text", "text", "text", "text", 
  "text", "text", "numeric", "text", "text", "text", "numeric", "text", "text", 
  "text", "numeric", "numeric", "text")

# Función para importar microdatos desde Excel

importar <- function(year, periodo){
  read_excel(paste0("Microdatos/",year,".xlsx"), 
             sheet = periodo, guess_max = 100000,  col_types = tipovar)
}

# Importar bases de datos por año y periodo

M2009 <- importar("P2009 Matrícula", "2009 Matrícula") 
M2010 <- importar("P2010 Matrícula", "2010 Matrícula") 
M2011 <- importar("P2011 Matrícula", "2011 Matrícula") 
M2012 <- importar("P2012 Matrícula", "2012 Matrícula") 
M2013 <- importar("P2013 Matrícula", "2013 Matrícula") 
M2014 <- importar("P2014 Matrícula", "2014 Matrícula") 
M2015 <- importar("P2015 Matrícula", "2015 Matrícula") 
M2016 <- importar("P2016 Matrícula", "2016 Matrícula") 
M2017 <- importar("P2017 Matrícula", "2017 Matrícula") 
M20181 <- importar("P20181 Matrícula", "20181 Matrícula") 

# CAMBIAR LAS VARIABLES CON NÚMEROS ALMACENADOS COMO TEXTO (LONGITUD - LATITUD)


M2009$LON_CIU_NAC	<- as.numeric(str_replace(M2009$LON_CIU_NAC, ",", "."))
M2009$LAT_CIU_NAC <- as.numeric(str_replace(M2009$LAT_CIU_NAC, ",", "."))
M2009$LON_CIU_PROC <- as.numeric(str_replace(M2009$LON_CIU_PROC, ",", "."))
M2009$LAT_CIU_PROC <- as.numeric(str_replace(M2009$LAT_CIU_PROC, ",", "."))

M2010$LON_CIU_NAC	<- as.numeric(str_replace(M2010$LON_CIU_NAC, ",", "."))
M2010$LAT_CIU_NAC <- as.numeric(str_replace(M2010$LAT_CIU_NAC, ",", "."))
M2010$LON_CIU_PROC <- as.numeric(str_replace(M2010$LON_CIU_PROC, ",", "."))
M2010$LAT_CIU_PROC <- as.numeric(str_replace(M2010$LAT_CIU_PROC, ",", "."))

M2011$LON_CIU_NAC	<- as.numeric(str_replace(M2011$LON_CIU_NAC, ",", "."))
M2011$LAT_CIU_NAC <- as.numeric(str_replace(M2011$LAT_CIU_NAC, ",", "."))
M2011$LON_CIU_PROC <- as.numeric(str_replace(M2011$LON_CIU_PROC, ",", "."))
M2011$LAT_CIU_PROC <- as.numeric(str_replace(M2011$LAT_CIU_PROC, ",", "."))

M2012$LON_CIU_NAC	<- as.numeric(str_replace(M2012$LON_CIU_NAC, ",", "."))
M2012$LAT_CIU_NAC <- as.numeric(str_replace(M2012$LAT_CIU_NAC, ",", "."))
M2012$LON_CIU_PROC <- as.numeric(str_replace(M2012$LON_CIU_PROC, ",", "."))
M2012$LAT_CIU_PROC <- as.numeric(str_replace(M2012$LAT_CIU_PROC, ",", "."))

M2013$LON_CIU_NAC	<- as.numeric(str_replace(M2013$LON_CIU_NAC, ",", "."))
M2013$LAT_CIU_NAC <- as.numeric(str_replace(M2013$LAT_CIU_NAC, ",", "."))
M2013$LON_CIU_PROC <- as.numeric(str_replace(M2013$LON_CIU_PROC, ",", "."))
M2013$LAT_CIU_PROC <- as.numeric(str_replace(M2013$LAT_CIU_PROC, ",", "."))

M2014$LON_CIU_NAC	<- as.numeric(str_replace(M2014$LON_CIU_NAC, ",", "."))
M2014$LAT_CIU_NAC <- as.numeric(str_replace(M2014$LAT_CIU_NAC, ",", "."))
M2014$LON_CIU_PROC <- as.numeric(str_replace(M2014$LON_CIU_PROC, ",", "."))
M2014$LAT_CIU_PROC <- as.numeric(str_replace(M2014$LAT_CIU_PROC, ",", "."))

M2015$LON_CIU_NAC	<- as.numeric(str_replace(M2015$LON_CIU_NAC, ",", "."))
M2015$LAT_CIU_NAC <- as.numeric(str_replace(M2015$LAT_CIU_NAC, ",", "."))
M2015$LON_CIU_PROC <- as.numeric(str_replace(M2015$LON_CIU_PROC, ",", "."))
M2015$LAT_CIU_PROC <- as.numeric(str_replace(M2015$LAT_CIU_PROC, ",", "."))

M2016$LON_CIU_NAC	<- as.numeric(str_replace(M2016$LON_CIU_NAC, ",", "."))
M2016$LAT_CIU_NAC <- as.numeric(str_replace(M2016$LAT_CIU_NAC, ",", "."))
M2016$LON_CIU_PROC <- as.numeric(str_replace(M2016$LON_CIU_PROC, ",", "."))
M2016$LAT_CIU_PROC <- as.numeric(str_replace(M2016$LAT_CIU_PROC, ",", "."))

M2017$LON_CIU_NAC	<- as.numeric(str_replace(M2017$LON_CIU_NAC, ",", "."))
M2017$LAT_CIU_NAC <- as.numeric(str_replace(M2017$LAT_CIU_NAC, ",", "."))
M2017$LON_CIU_PROC <- as.numeric(str_replace(M2017$LON_CIU_PROC, ",", "."))
M2017$LAT_CIU_PROC <- as.numeric(str_replace(M2017$LAT_CIU_PROC, ",", "."))


M20181$LON_CIU_NAC	<- as.numeric(str_replace(M20181$LON_CIU_NAC, ",", "."))
M20181$LAT_CIU_NAC <- as.numeric(str_replace(M20181$LAT_CIU_NAC, ",", "."))
M20181$LON_CIU_PROC <- as.numeric(str_replace(M20181$LON_CIU_PROC, ",", "."))
M20181$LAT_CIU_PROC <- as.numeric(str_replace(M20181$LAT_CIU_PROC, ",", "."))


# Pegar las bases de datos importadas por abajo

Matriculados <- bind_rows(M2009, M2010, M2011, M2012, M2013, M2014, M2015, M2016, M2017, M20181)


# Matriculados Facultades Sede Bogotá ----
 
# Filtro Bogotá

Matriculados <- Matriculados %>% 
  mutate(RTA = case_when(SEDE_NOMBRE_MAT == "Bogotá" & TIPO_ADM == "Regular" & TIPO_NIVEL == "Postgrado" ~ "Regular",
                         SEDE_NOMBRE_MAT == "Bogotá" & TIPO_ADM == "Regular" & TIPO_NIVEL == "Pregrado" ~ "Regular",
                         SEDE_NOMBRE_MAT == "Bogotá" & TIPO_ADM == "PAES" & TIPO_NIVEL == "Pregrado" ~ "PAES",
                         SEDE_NOMBRE_MAT == "Bogotá" & TIPO_ADM == "PEAMA" & TIPO_NIVEL == "Pregrado" ~ "Movilidad",
                         TIPO_NIVEL == "Pregrado" & ADM_PEAMA_ANDINA == "Bogotá" ~ "Inicial" )) %>% 
        filter(!is.na(RTA))       


MatProg_Bogota <- Matriculados %>% select(YEAR, SEMESTRE, TIPO_NIVEL, NIVEL, FACULTAD, SNIES_PROGRA, PROGRAMA, RTA) %>% 
                                   mutate(FORMACION = TIPO_NIVEL) %>% 
                            group_by(YEAR, SEMESTRE, TIPO_NIVEL, FACULTAD, SNIES_PROGRA, FORMACION, NIVEL, PROGRAMA, RTA) %>%
                            summarise(Total = n()) %>% 
                            unite("Poblacion", c(TIPO_NIVEL, RTA)) %>% 
                            spread(key = Poblacion, value =  Total) 
                            

# Exportar a CSV Carpeta Solicitudes 2019

write.csv(MatProg_Bogota, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/ProBog.csv")


# Eliminación del área de trabajo de los marcos de datos -data.frame- no requeridos

rm(M2009, M2010, M2011, M2012, M2013, M2014, M2015, M2016, M2017,M20181)
   memory.size()
   gc()
   memory.size()



   
   
# Matriculados Facultades 2017-2: 2018-1 ----

# Seleccionar matriculados 2017-2: 2018-1   

Mat_periodo <- filter(Matriculados, YEAR == 2017 & SEMESTRE == 2  | YEAR == 2018 & SEMESTRE == 1)     
Mat_periodo <- filter(Mat_periodo, SEDE_NOMBRE_MAT %in% c("Bogotá", "Medellín", "Manizales", "Palmira"))
   
Facultades <- Mat_periodo %>% count(YEAR, SEMESTRE, TIPO_NIVEL, SEDE_NOMBRE_MAT, FACULTAD)      
   
# Exportar a CSV Carpeta Solicitudes 2019

write.csv(Facultades, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/FacultadesMan.csv")

# 
# Derecho de petición afrodescendientes 29/05/2019 ----

## Dpto de Procedencia Global 

# Eliminar extranjeros

Matriculados <- Matriculados %>% filter(NACIONALIDAD == "Colombiana")

Procedencia <- Matriculados %>% filter(TIPO_NIVEL == "Pregrado") %>% 
               mutate(RTA = case_when(COD_DEP_PROC == 11 ~ "BOGOTÁ, D.C.",
                                      TRUE ~ "Otros lugares de Colombia")) %>% 
               group_by(YEAR, SEMESTRE) %>% count(RTA)


write.csv(Procedencia, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Derecho de peticiones Afros/Procedencia.csv")

## Dpto de Procedencia Afros

Matriculados <- Matriculados %>% filter(NACIONALIDAD == "Colombiana")

Afros_Bog <- Matriculados %>% filter(TIPO_NIVEL == "Pregrado") %>% 
  mutate(RTA = case_when(COD_DEP_PROC == 11 ~ "BOGOTÁ, D.C.",
                         TRUE ~ "Otros lugares de Colombia"),
        AFROS = case_when(PAES == "Población afrocolombiana" ~ "Afros",
                          TRUE ~ "Otras Comunidades")) %>% 
  group_by(YEAR, SEMESTRE) %>% count(AFROS, RTA)

write.csv(Afros_Bog, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Derecho de peticiones Afros/Afros_Bog.csv")

## Sexo

Matriculados <- Matriculados %>% filter()

Afros_sexo <- Matriculados %>% filter(TIPO_NIVEL == "Pregrado") %>% 
  mutate(AFROS = case_when(PAES == "Población afrocolombiana" ~ "Afros",
                           TRUE ~ "Otras Comunidades")) %>% group_by(YEAR, AFROS) %>% count()

write.csv(Afros_sexo, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Derecho de peticiones Afros/Afros_sexo.csv")

## Programas Académicos

Matriculados <- Matriculados %>% filter(NACIONALIDAD != "Extranjero")

Afros_programa <- Matriculados %>% filter(TIPO_NIVEL == "Pregrado") %>% 
                  group_by(YEAR, SEMESTRE, PROGRAMA) %>% count() %>% ungroup() %>% 
                  filter(YEAR %in% c(2017, 2018)) %>% unite("PERIODO", c("YEAR","SEMESTRE")) %>% 
                  spread(PERIODO, n)

write.csv(Afros_programa, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Derecho de peticiones Afros/Afros_programa.csv")




# Evolución de sexo por áreas del conocimiento ----


Sexo <- Matriculados %>% group_by(YEAR, SEMESTRE, TIPO_NIVEL, AREAC_SNIES) %>% 
        count(SEXO, name = "Total") %>% unite("PERIODO", c(YEAR, SEMESTRE), sep = "-") %>% 
        spread(PERIODO, Total)

write.csv(Sexo, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Sexo Areas Conocimiento/Sexo.csv")        
        



# Matriculados 2018-1 por Dpto de Procedencia ----

Dpto20181 <- Matriculados %>% filter (YEAR == 2018, SEMESTRE == 1, TIPO_NIVEL == "Pregrado") %>% 
  group_by(DEP_PROC) %>% count(name = "Total")

write.csv(Dpto20181, file = "C:/Users/Alberto/Documents/ONP/Oficina Nacional de Estadística/Solicitudes/2019/Dpto20181.csv")

# Mapa de matriculados Cundinamarca 2018-1 ----

# Insumos para mapa

# Paquetes y versiones requeridas

library(rgdal)        # Versión 1.2-8
library(leaflet)      # Versión 1.1.0 
library(htmlwidgets)  # Versión 1.0 
library(tidyverse)    # Versión 1.2.1
library(rjson)        # Versión 0.2.15
library(readxl)       # Versión 1.0.0
library(viridis)      # Versión 0.4.0 
library(extrafont)    # Versión 0.17


# Lectura del estándar División Política y Administrativa de Colombia - DIVIPOLA

divipola.R <- read.table("Estandares/DIVIPOLA_20160930.csv", sep=";", header=T)


# Base de datos con información de cabeceras municipales del archivo divipola

cabeceras <- divipola.R %>% select(code_dept=Código.Departamento,
                                   code_mun=Código.Municipio,
                                   departamentos=Nombre.Departamento,
                                   municipios=Nombre.Municipio,
                                   tipo_centro=Tipo.Centro.Poblado,
                                   longitud=Longitud,
                                   latitud=Latitud) %>% 
  filter(tipo_centro == "CABECERA MUNICIPAL (CM)")  


# Importar datos con variables de Matriculados de pregrado por lugar de nacimiento

tipovar <- c("text", "text", "numeric", "numeric", "text", "text", "text", "numeric", 
             "text", "numeric", "text", "text", "text", "numeric", "text", "numeric", 
             "text", "text", "text", "numeric", "text", "numeric", "text", "text", 
             "text", "text", "text", "numeric", "text", "text", "text", "text", "numeric", 
             "text", "numeric", "text", "text", "text", "text", "text", "text", "text", 
             "text", "text", "numeric", "text", "text", "text", "numeric", "text", "text", 
             "text", "numeric", "numeric", "text")


# Matricula <- read_xlsx("Microdatos/P20181 Matrícula.xlsx", sheet = "20181 Matrícula") 


Matricula <- read_excel("Microdatos/P20181 Matrícula.xlsx", sheet = "20181 Matrícula", 
                        guess_max = 100000,  col_types = tipovar)


# SELECCIONAR MATRICULADOS DE PREGRADO EN CUNDINAMARCA

Matricula <- Matricula %>% filter(TIPO_NIVEL == "Pregrado", COD_DEP_PROC == 25)


# CAMBIAR LAS VARIABLES CON NÚMEROS ALMACENADOS COMO TEXTO (LONGITUD - LATITUD)


Matricula$LON_CIU_NAC	<- as.numeric(str_replace(Matricula$LON_CIU_NAC, ",", "."))
Matricula$LAT_CIU_NAC <- as.numeric(str_replace(Matricula$LAT_CIU_NAC, ",", "."))
Matricula$LON_CIU_PROC <- as.numeric(str_replace(Matricula$LON_CIU_PROC, ",", "."))
Matricula$LAT_CIU_PROC <- as.numeric(str_replace(Matricula$LAT_CIU_PROC, ",", "."))



Matriculados <- Matricula %>% select(depart_asp=DEP_PROC,
                                     codept_asp=COD_DEP_PROC,
                                     ciudad_asp=CIU_PROC,
                                     codecity_asp=COD_CIU_PROC,
                                     long_asp=LON_CIU_PROC,
                                     lat_asp=LAT_CIU_PROC) %>%
  filter(!is.na(depart_asp))


# Total de Matriculados de pregrado por departamento de nacimiento 

CANT_MAT <- Matriculados %>% group_by(codept_asp) %>% summarise(Total=n())


# Total de Matriculados de pregrado por municipio de nacimiento 
# Se eliminan los rgistros con datos faltantes en municipio de nacimiento

cantasp_city <- Matriculados %>% group_by(codecity_asp) %>% summarise(Total=n())
cantasp_city <- cantasp_city %>% filter(!is.na(codecity_asp))
# 1 registro 2019-1

# Función para construcción de información de las capitales de departamento

check.integer <- function(x) {
  x == round(x)
}

# Información DIVIPOLA para capitales de departamento

capitales <- cabeceras %>% filter(check.integer((cabeceras$code_mun-1)/1000)==TRUE) %>% 
  filter(code_mun!="25001")


# convertir variables de longitud y latitud a valores numéricos

options(digits=10)

capitales$longitud <- as.numeric(str_replace(capitales$longitud, ",", "."))
capitales$latitud  <- as.numeric(str_replace(capitales$latitud, ",", "."))

################################################################
# Extraer lista de códigos de los municipios - 1122 - municipios
################################################################

# Archivo json con formato lista

json_file <- "JSON/mpio2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse = "\n")) 

# Cambiar formato de variable MPIOS a integer

for(i in 1:1122){
  json_data$features[[i]]$properties$MPIOS = as.integer(json_data$features[[i]]$properties$MPIOS)
}

# Crear matriz de ceros con dos columnas y 1122 fila (# municipios)

codigos <- matrix(0, nrow=1122,ncol=2)

# Insertar en la matriz el código de municipios del objeto JSON
# Importante conservar el orden de códigos de municipios del JSON

for(i in 1:1122){
  codigos[i,1] = json_data$features[[i]]$properties$MPIOS
}

# Insertar cantidad de Matriculados por municipio de nacimiento a la matriz 
# Importante insertar en el orden de códigos de municipios del JSON

for(i in cantasp_city$codecity_asp){
  codigos[codigos[,1] == i, 2] = cantasp_city$Total[cantasp_city$codecity_asp == i]
}

######### Json por jurisdicciones de municipios

cities_col.R <- rgdal::readOGR("JSON/mpio5.json", use_iconv = T, encoding="UTF-8")

cities_col.R@data <- cities_col.R@data[c(6,8)]

#Agregar información al Spatial Data Frame

cities_col.R@data$CODE_MPI <- codigos[ ,1]
cities_col.R@data$CANT_MAT <- codigos[ ,2]

##############################################################
#Lectura de JSON de Colombia por departamentos
##############################################################

# Archivo json con formato spatialPolygonsDataFrame

colombia.R <- rgdal::readOGR("JSON/depto4.json", use_iconv = T, encoding= "UTF-8")

# Crear matriz de ceros con dos columnas y 33 filas (# departamentos)

codigos2 <- matrix(0, nrow = 33, ncol = 2)

# insertar en la matriz los códigos DIVIPOLA de los departamentos

for(i in 1:33){
  codigos2[i,1] = as.integer(as.character(colombia.R@data$DPTO[i]))
}

# Insertar cantidad de Matriculados por departamento de nacimiento a la matriz 
# Importante insertar en el orden de códigos de departamentos del objeto

for(i in CANT_MAT$codept_asp){
  codigos2[codigos2[,1] == i, 2] = CANT_MAT$Total[CANT_MAT$codept_asp == i]
}

# Eliminar información complementaria

colombia.R@data<-colombia.R@data[2] 

# Insertar en el objeto spatialPoly .. la cantidad de Matriculados por depto de nacimiento

colombia.R@data$CANT_MAT <- codigos2[,2]

##########################################################
# Componente final de mapas
##########################################################


# Ubicar el centroide de cada departamento 

x <- NULL
for(i in 1:33){
  x[i] <- as.character(as.factor(colombia.R@data$NOMBRE_DPT[[i]]))
}

y <- matrix(0, 33, 2)

for(i in 1:33){
  y[i,] <- colombia.R@polygons[[i]]@Polygons[[1]]@labpt
  
}

# Centroides de los departamentos

centro_dept <- data.frame(x,y)
centro_dept
colnames(centro_dept) <- c("dept", "lon", "lat")

# Seleccionar mapas libres de base
# ESRI es un proveedor de bases de mapas con licencia pública
esri <- grep("^Esri", providers, value = T)
esri<- esri[c(11,2,10)]
esri
names.esri <- c("Ligero","Street","Satélite <br>&nbsp;&nbsp;&nbsp;&nbsp; NatGeo")

#Filtrar sedes de la Universidad Nacional de Colombia

Sede <- c("Medellín", "Bogotá", "Manizales", "Tumaco", "Palmira", "Arauca", "Caribe", "Amazonas")

sedes <- cabeceras %>% filter(code_mun %in% c(5001, 11001, 17001, 52835, 76520, 81001, 88001, 91001)) %>% mutate(Sede = Sede)

# Convertir variables de longitud y de latitud a valores numéricos

sedes$longitud <- as.numeric(str_replace(sedes$longitud, ",", "."))
sedes$latitud  <- as.numeric(str_replace(sedes$latitud, ",", "."))

# Parametrización de íconos de la UN
#font_import();n

sedeIcon <- makeAwesomeIcon (markerColor = "green", iconColor = "white", 
                             fontFamily = "Leonardian", text = "un")

# aparece el nombre de la sede en la etiqueta
label_sede <- sprintf("<strong>%s %s</strong>", 
                      "Sede ", sedes$Sede)%>% lapply(htmltools::HTML)

# Función para cambiar mayúsculas a minúsculas

simpleCap <- function(x) {
  s <- strsplit(x, " ")[[1]]
  paste(toupper(substring(s, 1,1)), substring(s, 2),
        sep="", collapse=" ")
}

# Inicio Mapa

### Mapa de municipios ####

# Ubicar el centroide del país

centroidecol <- centro_dept%>% filter(dept  == "CUNDINAMARCA")

# Paleta para mapa de aspirantes por municipio de nacimiento

pal_col <- colorBin(palette = "BuGn" , bins = c(0 , 1 ,  5 ,  21 ,  51 ,  201 ,  35000))

# Etiquetas para el mapa interactivo

labels_mun <- sprintf(
  "<strong> %s </strong> (%s) <br/> %g  matriculados" , 
  cities_col.R@data$NOMBRE_MPI ,  cities_col.R@data$NOMBRE_DPT ,  cities_col.R@data$CANT_MAT
) %>% lapply(htmltools::HTML)

# Inicio mapa

municipios <- leaflet(cities_col.R) %>% setView(lat = centroidecol$lat , lng =  centroidecol$lon , zoom = 9)

for (k in c(1 , 2 , 3)) {
  municipios <- municipios %>% addProviderTiles(names(esri[k])  , group = names.esri[k] ,  options =  providerTileOptions(minZoom = 5))
}

municipios <- municipios %>%
  setView(lng = -74.11589 ,  lat = 4.796276 ,  zoom = 9)%>%
  addPolygons(stroke = T ,  smoothFactor = 0.05 ,   color = "gray" ,  weight = 1 , 
              fillColor = ~pal_col(CANT_MAT) , 
              label = labels_mun ,  labelOptions = labelOptions(     style = list("font-weight" = "normal" ,  padding = "3px 8px") ,   textsize = "12px" , direction = "auto"   ) ,  dashArray = "3" , 
              fillOpacity = 1 , 
              highlight = highlightOptions(
                weight = 5 , 
                color = "#666" , 
                dashArray = "" , 
                fillOpacity = 0.7 , 
                bringToFront = F)) %>% 
  addPolylines(data =  colombia.R ,  stroke = T ,  smoothFactor = 0.05 ,  color = '#005a32' ,  weight = 2)%>%
  addLayersControl(baseGroups = names.esri ,  overlayGroups = c( "Mostrar <br> sedes UNAL") , 
                   options = layersControlOptions(collapsed = FALSE)) %>%
  addLegend("bottomright" ,  colors = c("#EDF8FB", "#CCECE6", "#99D8C9", "#66C2A4", "#2CA25F", "#006D2C") ,  values = ~CANT_MAT ,  
            title = "Matriculados 2018-1" , 
            opacity = 1 ,  bins = c(0 , 1 ,  5 ,  21 ,  51 ,  201 ,  35000) ,  labels = c("0" ,  "1 - 5" ,  "5 - 20" ,  "21 - 50" ,  "51 - 200" ,  "Más de 200"))%>%
  addScaleBar(position = "bottomleft" , scaleBarOptions(metric = T ,  imperial =  F))%>%
  addMiniMap(position = "bottomleft" , zoomAnimation = T ,  toggleDisplay = T ,  autoToggleDisplay = T)%>%
  hideGroup("Mostrar <br> sedes UNAL")%>%
  addEasyButton(easyButton(
    icon = "glyphicon-screenshot" ,  title = "Retornar" , 
    onClick = JS("function(btn ,  map){ map.setView(L.latLng(4.796276 , -74.11589) ,  9); }")))%>%
  addLabelOnlyMarkers(data =  colombia.R ,  lat = centro_dept$lat ,  lng = centro_dept$lon , label =  ~paste0(sapply(tolower(NOMBRE_DPT) , simpleCap)) ,   labelOptions = labelOptions(zoomAnimation = T ,  noHide = T ,  direction = 'top' ,  textOnly = T , textsize = "9px") )%>%
  addCircleMarkers(data =  colombia.R ,  radius = 2 ,  fillOpacity =  0.9 ,  stroke = T ,  color = '#d95f02' , fill =  T ,  fillColor = "orangelight"  , lat = capitales$latitud ,  lng = capitales$longitud)%>%
  addAwesomeMarkers(group = "Mostrar <br> sedes UNAL" ,  lat = sedes$latitud ,  lng = sedes$longitud ,  icon = sedeIcon ,  label =  label_sede ,  labelOptions = labelOptions(     style = list("font-weight" = "large" ,  padding = "3px 8px") ,   textsize = "15px" , direction = "auto"   ))

municipios


saveWidget(municipios,
           file = file.path(str_sub(getwd(), 1, str_length(getwd())-15),
                            "G_Matriculados/Consultas",
                            "Mat_res_cundinamarca.html"),
           selfcontained = F, libdir = "libraryjs")


# Mapas matriculados pregrado - Unimedios ----

# Insumos para mapa

# Paquetes y versiones requeridas

library(rgdal)        # Versión 1.2-8
library(leaflet)      # Versión 1.1.0 
library(htmlwidgets)  # Versión 1.0 
library(tidyverse)    # Versión 1.2.1
library(rjson)        # Versión 0.2.15
library(readxl)       # Versión 1.0.0
library(viridis)      # Versión 0.4.0 
library(extrafont)    # Versión 0.17


# Lectura del estándar División Política y Administrativa de Colombia - DIVIPOLA

divipola.R <- read.table("Estandares/DIVIPOLA_20160930.csv", sep=";", header=T)


# Base de datos con información de cabeceras municipales del archivo divipola

cabeceras <- divipola.R %>% select(code_dept=Código.Departamento,
                                   code_mun=Código.Municipio,
                                   departamentos=Nombre.Departamento,
                                   municipios=Nombre.Municipio,
                                   tipo_centro=Tipo.Centro.Poblado,
                                   longitud=Longitud,
                                   latitud=Latitud) %>% 
  filter(tipo_centro == "CABECERA MUNICIPAL (CM)")  


# Importar datos con variables de Matriculados de pregrado por lugar de nacimiento

tipovar <- c("text", "text", "numeric", "numeric", "text", "text", "text", "numeric", 
             "text", "numeric", "text", "text", "text", "numeric", "text", "numeric", 
             "text", "text", "text", "numeric", "text", "numeric", "text", "text", 
             "text", "text", "text", "numeric", "text", "text", "text", "text", "numeric", 
             "text", "numeric", "text", "text", "text", "text", "text", "text", "text", 
             "text", "text", "numeric", "text", "text", "text", "numeric", "text", "text", 
             "text", "numeric", "numeric", "text")


# Matricula <- read_xlsx("Microdatos/P20181 Matrícula.xlsx", sheet = "20181 Matrícula") 


Matricula <- read_excel("Microdatos/P20181 Matrícula.xlsx", sheet = "20181 Matrícula", 
                        guess_max = 100000,  col_types = tipovar)


# SELECCIONAR MATRICULADOS DE PREGRADO 

Matricula <- Matricula %>% filter(TIPO_NIVEL == "Pregrado")


# CAMBIAR LAS VARIABLES CON NÚMEROS ALMACENADOS COMO TEXTO (LONGITUD - LATITUD)


Matricula$LON_CIU_NAC	<- as.numeric(str_replace(Matricula$LON_CIU_NAC, ",", "."))
Matricula$LAT_CIU_NAC <- as.numeric(str_replace(Matricula$LAT_CIU_NAC, ",", "."))
Matricula$LON_CIU_PROC <- as.numeric(str_replace(Matricula$LON_CIU_PROC, ",", "."))
Matricula$LAT_CIU_PROC <- as.numeric(str_replace(Matricula$LAT_CIU_PROC, ",", "."))



Matriculados <- Matricula %>% select(depart_asp=DEP_PROC,
                                     codept_asp=COD_DEP_PROC,
                                     ciudad_asp=CIU_PROC,
                                     codecity_asp=COD_CIU_PROC,
                                     long_asp=LON_CIU_PROC,
                                     lat_asp=LAT_CIU_PROC) %>%
  filter(!is.na(depart_asp))


# Total de Matriculados de pregrado por departamento de nacimiento 

CANT_MAT <- Matriculados %>% group_by(codept_asp) %>% summarise(Total=n())


# Total de Matriculados de pregrado por municipio de nacimiento 
# Se eliminan los rgistros con datos faltantes en municipio de nacimiento

cantasp_city <- Matriculados %>% group_by(codecity_asp) %>% summarise(Total=n())
cantasp_city <- cantasp_city %>% filter(!is.na(codecity_asp))
# 1 registro 2019-1

# Función para construcción de información de las capitales de departamento

check.integer <- function(x) {
  x == round(x)
}

# Información DIVIPOLA para capitales de departamento

capitales <- cabeceras %>% filter(check.integer((cabeceras$code_mun-1)/1000)==TRUE) %>% 
  filter(code_mun!="25001")


# convertir variables de longitud y latitud a valores numéricos

options(digits=10)

capitales$longitud <- as.numeric(str_replace(capitales$longitud, ",", "."))
capitales$latitud  <- as.numeric(str_replace(capitales$latitud, ",", "."))

################################################################
# Extraer lista de códigos de los municipios - 1122 - municipios
################################################################

# Archivo json con formato lista

json_file <- "JSON/mpio2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse = "\n")) 

# Cambiar formato de variable MPIOS a integer

for(i in 1:1122){
  json_data$features[[i]]$properties$MPIOS = as.integer(json_data$features[[i]]$properties$MPIOS)
}

# Crear matriz de ceros con dos columnas y 1122 fila (# municipios)

codigos <- matrix(0, nrow=1122,ncol=2)

# Insertar en la matriz el código de municipios del objeto JSON
# Importante conservar el orden de códigos de municipios del JSON

for(i in 1:1122){
  codigos[i,1] = json_data$features[[i]]$properties$MPIOS
}

# Insertar cantidad de Matriculados por municipio de nacimiento a la matriz 
# Importante insertar en el orden de códigos de municipios del JSON

for(i in cantasp_city$codecity_asp){
  codigos[codigos[,1] == i, 2] = cantasp_city$Total[cantasp_city$codecity_asp == i]
}

######### Json por jurisdicciones de municipios

cities_col.R <- rgdal::readOGR("JSON/mpio5.json", use_iconv = T, encoding="UTF-8")

cities_col.R@data <- cities_col.R@data[c(6,8)]

#Agregar información al Spatial Data Frame

cities_col.R@data$CODE_MPI <- codigos[ ,1]
cities_col.R@data$CANT_MAT <- codigos[ ,2]

##############################################################
#Lectura de JSON de Colombia por departamentos
##############################################################

# Archivo json con formato spatialPolygonsDataFrame

colombia.R <- rgdal::readOGR("JSON/depto4.json", use_iconv = T, encoding= "UTF-8")

# Crear matriz de ceros con dos columnas y 33 filas (# departamentos)

codigos2 <- matrix(0, nrow = 33, ncol = 2)

# insertar en la matriz los códigos DIVIPOLA de los departamentos

for(i in 1:33){
  codigos2[i,1] = as.integer(as.character(colombia.R@data$DPTO[i]))
}

# Insertar cantidad de Matriculados por departamento de nacimiento a la matriz 
# Importante insertar en el orden de códigos de departamentos del objeto

for(i in CANT_MAT$codept_asp){
  codigos2[codigos2[,1] == i, 2] = CANT_MAT$Total[CANT_MAT$codept_asp == i]
}

# Eliminar información complementaria

colombia.R@data<-colombia.R@data[2] 

# Insertar en el objeto spatialPoly .. la cantidad de Matriculados por depto de nacimiento

colombia.R@data$CANT_MAT <- codigos2[,2]

##########################################################
# Componente final de mapas
##########################################################


# Ubicar el centroide de cada departamento 

x <- NULL
for(i in 1:33){
  x[i] <- as.character(as.factor(colombia.R@data$NOMBRE_DPT[[i]]))
}

y <- matrix(0, 33, 2)

for(i in 1:33){
  y[i,] <- colombia.R@polygons[[i]]@Polygons[[1]]@labpt
  
}

# Centroides de los departamentos

centro_dept <- data.frame(x,y)
centro_dept
colnames(centro_dept) <- c("dept", "lon", "lat")

# Seleccionar mapas libres de base
# ESRI es un proveedor de bases de mapas con licencia pública
esri <- grep("^Esri", providers, value = T)
esri<- esri[c(11,2,10)]
esri
names.esri <- c("Ligero","Street","Satélite <br>&nbsp;&nbsp;&nbsp;&nbsp; NatGeo")

#Filtrar sedes de la Universidad Nacional de Colombia

Sede <- c("Medellín", "Bogotá", "Manizales", "Tumaco", "Palmira", "Arauca", "Caribe", "Amazonas")

sedes <- cabeceras %>% filter(code_mun %in% c(5001, 11001, 17001, 52835, 76520, 81001, 88001, 91001)) %>% mutate(Sede = Sede)

# Convertir variables de longitud y de latitud a valores numéricos

sedes$longitud <- as.numeric(str_replace(sedes$longitud, ",", "."))
sedes$latitud  <- as.numeric(str_replace(sedes$latitud, ",", "."))

# Parametrización de íconos de la UN
#font_import();n

sedeIcon <- makeAwesomeIcon (markerColor = "green", iconColor = "white", 
                             fontFamily = "Leonardian", text = "un")

# aparece el nombre de la sede en la etiqueta
label_sede <- sprintf("<strong>%s %s</strong>", 
                      "Sede ", sedes$Sede)%>% lapply(htmltools::HTML)

# Función para cambiar mayúsculas a minúsculas

simpleCap <- function(x) {
  s <- strsplit(x, " ")[[1]]
  paste(toupper(substring(s, 1,1)), substring(s, 2),
        sep="", collapse=" ")
}


# Inicio Mapa (Sí / No)

# Ubicar el centroide del país

centroidecol <- centro_dept%>% filter(dept  == "CUNDINAMARCA")

# Paleta para mapa de aspirantes por municipio (0 y 1)

pal_uno <- colorBin(palette = c("#001866" ,  "#F24C30") , bins = c(0 , 1 ,  35000))

# Etiquetas para el mapa interactivo

labels_mun <- sprintf(
  "<strong> %s </strong> (%s) <br/> %g  matriculados" , 
  cities_col.R@data$NOMBRE_MPI ,  cities_col.R@data$NOMBRE_DPT ,  cities_col.R@data$CANT_MAT
) %>% lapply(htmltools::HTML)

# Inicio mapa

municipios2 <- leaflet(cities_col.R) %>% setView(lat = centroidecol$lat , lng =  centroidecol$lon , zoom = 9)

for (k in c(1 , 2 , 3)) {
  municipios2 <- municipios2 %>% addProviderTiles(names(esri[k])  , group = names.esri[k] ,  options =  providerTileOptions(minZoom = 5))
}

municipios2 <- municipios2 %>%
  addLayersControl(baseGroups = names.esri ,  overlayGroups = c( "Mostrar <br> sedes UNAL") , 
                   options = layersControlOptions(collapsed = FALSE)) %>%
  setView(lng = -69.79854267 ,  lat = 4.444487622 ,  zoom = 6)%>%
  addPolygons(stroke = T ,  smoothFactor = 0.05 ,   color = "gray" ,  weight = 1 , 
              fillColor = ~pal_uno(CANT_MAT) , 
              label = labels_mun ,  labelOptions = labelOptions(     style = list("font-weight" = "normal" ,  padding = "3px 8px") ,   textsize = "12px" , direction = "auto"   ) ,  dashArray = "3" , 
              fillOpacity = 1 , 
              highlight = highlightOptions(
                weight = 5 , 
                color = "#666" , 
                dashArray = "" , 
                fillOpacity = 0.7 , 
                bringToFront = F)) %>%   
  addPolylines(data =  colombia.R ,  stroke = T ,  smoothFactor = 0.05 ,  color = "white" ,  weight = 2)%>%
  addLegend("bottomright" ,  values = ~CANT_MAT ,  bins = c(0 , 1 ,  34750) , 
            title = "Matriculados 2018-1" , labels = c("0 matriculados" , "1 o más matriculados") ,  colors = c("#001866" ,  "#F24C30") , opacity = 1)%>%
  addMiniMap(position = "bottomleft" , zoomAnimation = T ,  toggleDisplay = T ,  autoToggleDisplay = T)%>%
  hideGroup("Mostrar <br> sedes UNAL")%>%
  addEasyButton(easyButton(
    icon = "glyphicon-screenshot" ,  title = "Retornar" , 
    onClick = JS("function(btn ,  map){ map.setView(L.latLng(4.796276 , -74.11589) ,  6); }")))%>%
  addLabelOnlyMarkers(data =  colombia.R ,  lat = centro_dept$lat ,  lng = centro_dept$lon , label =  ~paste0(sapply(tolower(NOMBRE_DPT) , simpleCap)) ,   labelOptions = labelOptions(zoomAnimation = T ,  noHide = T ,  direction = 'top' ,  textOnly = T , textsize = "9px") )%>%
  addCircleMarkers(data =  colombia.R ,  radius = 2 ,  fillOpacity =  0.9 ,  stroke = T ,  color =  "#377eb8" , fill =  T ,  fillColor = "purplelight"  , lat = capitales$latitud ,  lng = capitales$longitud)%>%
  addAwesomeMarkers(group = "Mostrar <br> sedes UNAL" ,  lat = sedes$latitud ,  lng = sedes$longitud ,  icon = sedeIcon ,  label =  label_sede ,  labelOptions = labelOptions(     style = list("font-weight" = "large" ,  padding = "3px 8px") ,   textsize = "15px" , direction = "auto"   ))%>%
  addScaleBar(position = "bottomleft" , scaleBarOptions(metric = T ,  imperial =  F))

municipios2

saveWidget(municipios2,
           file = file.path(str_sub(getwd(), 1, str_length(getwd())-15),
                            "G_Matriculados/Consultas",
                            "Mat_res_col1.html"),
           selfcontained = F, libdir = "libraryjs")

# Inicio Mapa Municipios


# Paleta para mapa de aspirantes por municipio de nacimiento

pal_col <- colorBin(palette = c("#b6e7ff", "#66c4ff", "#4c92d6", "#3160ad", "#193c8a", "#001866") , bins = c(0 , 1 ,  6 ,  11 ,  101 ,  1001 ,  35000))


# Etiquetas para el mapa interactivo

labels_mun <- sprintf(
  "<strong> %s </strong> (%s) <br/> %g  matriculados" , 
  cities_col.R@data$NOMBRE_MPI ,  cities_col.R@data$NOMBRE_DPT ,  cities_col.R@data$CANT_MAT
) %>% lapply(htmltools::HTML)

# Inicio mapa

municipios <- leaflet(cities_col.R) %>% setView(lat = centroidecol$lat , lng =  centroidecol$lon , zoom = 7)

for (k in c(1 , 2 , 3)) {
  municipios <- municipios %>% addProviderTiles(names(esri[k])  , group = names.esri[k] ,  options =  providerTileOptions(minZoom = 5))
}

municipios <- municipios %>%
  
  setView(lng = -69.79854267 ,  lat = 4.444487622 ,  zoom = 6)%>%
  addPolygons(stroke = T ,  smoothFactor = 0.05 ,   color = "gray" ,  weight = 1 , 
              fillColor = ~pal_col(CANT_MAT) , 
              label = labels_mun ,  labelOptions = labelOptions(     style = list("font-weight" = "normal" ,  padding = "3px 8px") ,   textsize = "12px" , direction = "auto"   ) ,  dashArray = "3" , 
              fillOpacity = 1 , 
              highlight = highlightOptions(
                weight = 5 , 
                color = "#666" , 
                dashArray = "" , 
                fillOpacity = 0.7 , 
                bringToFront = F)) %>% 
  addPolylines(data =  colombia.R ,  stroke = T ,  smoothFactor = 0.05 ,  color = '#005a32' ,  weight = 2)%>%
  addLayersControl(baseGroups = names.esri ,  overlayGroups = c( "Mostrar <br> sedes UNAL") , 
                   options = layersControlOptions(collapsed = FALSE)) %>%
  addLegend("bottomright" ,  colors = c("#b6e7ff", "#66c4ff", "#4c92d6", "#3160ad", "#193c8a", "#001866") ,  values = ~CANT_MAT ,  
            title = "Matriculados 2018-1" , 
            opacity = 1 ,  bins = c(0 , 1 , 6 , 11 , 101 , 1001 ,  35000) ,  labels = c("0" ,  "1 - 5" ,  "6 - 10" ,  "11 - 100" ,  "101 - 1000" ,  "Más de 1000"))%>%
  addScaleBar(position = "bottomleft" , scaleBarOptions(metric = T ,  imperial =  F))%>%
  addMiniMap(position = "bottomleft" , zoomAnimation = T ,  toggleDisplay = T ,  autoToggleDisplay = T)%>%
  hideGroup("Mostrar <br> sedes UNAL")%>%
  addEasyButton(easyButton(
    icon = "glyphicon-screenshot" ,  title = "Retornar" , 
    onClick = JS("function(btn ,  map){ map.setView(L.latLng(4.796276 , -74.11589) ,  6); }")))%>%
  addLabelOnlyMarkers(data =  colombia.R ,  lat = centro_dept$lat ,  lng = centro_dept$lon , label =  ~paste0(sapply(tolower(NOMBRE_DPT) , simpleCap)) ,   labelOptions = labelOptions(zoomAnimation = T ,  noHide = T ,  direction = 'top' ,  textOnly = T , textsize = "9px") )%>%
  addCircleMarkers(data =  colombia.R ,  radius = 2 ,  fillOpacity =  0.9 ,  stroke = T ,  color = '#d95f02' , fill =  T ,  fillColor = "orangelight"  , lat = capitales$latitud ,  lng = capitales$longitud)%>%
  addAwesomeMarkers(group = "Mostrar <br> sedes UNAL" ,  lat = sedes$latitud ,  lng = sedes$longitud ,  icon = sedeIcon ,  label =  label_sede ,  labelOptions = labelOptions(     style = list("font-weight" = "large" ,  padding = "3px 8px") ,   textsize = "15px" , direction = "auto"   ))

municipios

saveWidget(municipios,
           file = file.path(str_sub(getwd(), 1, str_length(getwd())-15),
                            "G_Matriculados/Consultas",
                            "Mat_res_mun.html"),
           selfcontained = F, libdir = "libraryjs")



